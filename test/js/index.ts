// Code generated by gen-napi. DO NOT EDIT.
const {
  _Tensor,
  _erf,
  _sort,
  _power,
  _median,
  _identity,
  _reshape,
  _sin,
  _sigmoid,
  _rint,
  _flip,
  _maximum,
  _matmul,
  _full,
  _iota,
  _tile,
  _floor,
  _sum,
  _countNonzero,
  _arange,
  _logicalNot,
  _ceil,
  _amin,
  _argmax,
  _var: __var,
  _all,
  _concatenate,
  _tril,
  _triu,
  _where,
  _isnan,
  _minimum,
  _argmin,
  _std,
  _negative,
  _log1p,
  _cos,
  _sqrt,
  _nonzero,
  _clip,
  _sign,
  _cumsum,
  _any,
  _transpose,
  _exp,
  _absolute,
  _norm,
  _amax,
  _mean,
  _log,
  _tanh,
  _roll,
  _isinf,
  _lessThanEqual,
  _sub,
  _bitwiseOr,
  _div,
  _lessThan,
  _logicalOr,
  _mul,
  _logicalAnd,
  _bitwiseXor,
  _mod,
  _greaterThan,
  _rShift,
  _neq,
  _greaterThanEqual,
  _add,
  _eq,
  _lShift,
  _bitwiseAnd,
  _init,
  _bytesUsed,
  _setRowMajor,
  _setColMajor,
  _isRowMajor,
  _isColMajor,
  _dtypeFloat32,
  _dtypeFloat64,
  _dtypeBoolInt8,
  _dtypeInt16,
  _dtypeInt32,
  _dtypeInt64,
  _dtypeUint8,
  _dtypeUint16,
  _dtypeUint32,
  _dtypeUint64,
  _rand,
  _randn
} = require('../../build/Release/flashlight_napi_bindings.node')

class Tensor {
  #_native_self

  constructor(t) {
    this.#_native_self = new _Tensor(t)
  }

  get _native_self() {
    return this.#_native_self
  }

  transpose(axes) {
    return this.#_native_self.transpose(axes)
  }

  exp() {
    return this.#_native_self.exp()
  }

  absolute() {
    return this.#_native_self.absolute()
  }

  norm(axes, p, keepDims) {
    return this.#_native_self.norm(axes, p, keepDims)
  }

  any(axes, keepDims) {
    return this.#_native_self.any(axes, keepDims)
  }

  mean(axes, keepDims) {
    return this.#_native_self.mean(axes, keepDims)
  }

  log() {
    return this.#_native_self.log()
  }

  tanh() {
    return this.#_native_self.tanh()
  }

  roll(shift, axis) {
    return this.#_native_self.roll(shift, axis)
  }

  isinf() {
    return this.#_native_self.isinf()
  }

  amax(axes, keepDims) {
    return this.#_native_self.amax(axes, keepDims)
  }

  sort(axis, sortMode) {
    return this.#_native_self.sort(axis, sortMode)
  }

  power(rhs) {
    return this.#_native_self.power(rhs.#_native_self)
  }

  median(axes, keepDims) {
    return this.#_native_self.median(axes, keepDims)
  }

  reshape(shape) {
    return this.#_native_self.reshape(shape)
  }

  sin() {
    return this.#_native_self.sin()
  }

  sigmoid() {
    return this.#_native_self.sigmoid()
  }

  erf() {
    return this.#_native_self.erf()
  }

  flip(dim) {
    return this.#_native_self.flip(dim)
  }

  maximum(rhs) {
    return this.#_native_self.maximum(rhs.#_native_self)
  }

  matmul(rhs, lhsProp, rhsProp) {
    return this.#_native_self.matmul(rhs.#_native_self, lhsProp, rhsProp)
  }

  tile(shape) {
    return this.#_native_self.tile(shape)
  }

  floor() {
    return this.#_native_self.floor()
  }

  rint() {
    return this.#_native_self.rint()
  }

  sum(axes, keepDims) {
    return this.#_native_self.sum(axes, keepDims)
  }

  logicalNot() {
    return this.#_native_self.logicalNot()
  }

  ceil() {
    return this.#_native_self.ceil()
  }

  amin(axes, keepDims) {
    return this.#_native_self.amin(axes, keepDims)
  }

  countNonzero(axes, keepDims) {
    return this.#_native_self.countNonzero(axes, keepDims)
  }

  var(axes, bias, keepDims) {
    return this.#_native_self.var(axes, bias, keepDims)
  }

  all(axes, keepDims) {
    return this.#_native_self.all(axes, keepDims)
  }

  tril() {
    return this.#_native_self.tril()
  }

  triu() {
    return this.#_native_self.triu()
  }

  where(x, y) {
    return this.#_native_self.where(x.#_native_self, y.#_native_self)
  }

  argmin(axis, keepDims) {
    return this.#_native_self.argmin(axis, keepDims)
  }

  std(axes, keepDims) {
    return this.#_native_self.std(axes, keepDims)
  }

  negative() {
    return this.#_native_self.negative()
  }

  log1p() {
    return this.#_native_self.log1p()
  }

  cos() {
    return this.#_native_self.cos()
  }

  sqrt() {
    return this.#_native_self.sqrt()
  }

  isnan() {
    return this.#_native_self.isnan()
  }

  nonzero() {
    return this.#_native_self.nonzero()
  }

  clip(low, high) {
    return this.#_native_self.clip(low.#_native_self, high.#_native_self)
  }

  sign() {
    return this.#_native_self.sign()
  }

  cumsum(axis) {
    return this.#_native_self.cumsum(axis)
  }

  lessThan(rhs) {
    return this.#_native_self.lessThan(rhs.#_native_self)
  }

  logicalOr(rhs) {
    return this.#_native_self.logicalOr(rhs.#_native_self)
  }

  mul(rhs) {
    return this.#_native_self.mul(rhs.#_native_self)
  }

  logicalAnd(rhs) {
    return this.#_native_self.logicalAnd(rhs.#_native_self)
  }

  bitwiseXor(rhs) {
    return this.#_native_self.bitwiseXor(rhs.#_native_self)
  }

  lShift(rhs) {
    return this.#_native_self.lShift(rhs.#_native_self)
  }

  mod(rhs) {
    return this.#_native_self.mod(rhs.#_native_self)
  }

  greaterThan(rhs) {
    return this.#_native_self.greaterThan(rhs.#_native_self)
  }

  rShift(rhs) {
    return this.#_native_self.rShift(rhs.#_native_self)
  }

  neq(rhs) {
    return this.#_native_self.neq(rhs.#_native_self)
  }

  greaterThanEqual(rhs) {
    return this.#_native_self.greaterThanEqual(rhs.#_native_self)
  }

  add(rhs) {
    return this.#_native_self.add(rhs.#_native_self)
  }

  eq(rhs) {
    return this.#_native_self.eq(rhs.#_native_self)
  }

  bitwiseAnd(rhs) {
    return this.#_native_self.bitwiseAnd(rhs.#_native_self)
  }

  lessThanEqual(rhs) {
    return this.#_native_self.lessThanEqual(rhs.#_native_self)
  }

  sub(rhs) {
    return this.#_native_self.sub(rhs.#_native_self)
  }

  bitwiseOr(rhs) {
    return this.#_native_self.bitwiseOr(rhs.#_native_self)
  }

  div(rhs) {
    return this.#_native_self.div(rhs.#_native_self)
  }

  copy() {
    return this.#_native_self.copy()
  }

  shape() {
    return this.#_native_self.shape()
  }

  elements() {
    return this.#_native_self.elements()
  }

  ndim() {
    return this.#_native_self.ndim()
  }

  isEmpty() {
    return this.#_native_self.isEmpty()
  }

  bytes() {
    return this.#_native_self.bytes()
  }

  type() {
    return this.#_native_self.type()
  }

  isSparse() {
    return this.#_native_self.isSparse()
  }

  strides() {
    return this.#_native_self.strides()
  }

  astype() {
    return this.#_native_self.astype()
  }

  flatten() {
    return this.#_native_self.flatten()
  }

  asContiguousTensor() {
    return this.#_native_self.asContiguousTensor()
  }

  isContiguous() {
    return this.#_native_self.isContiguous()
  }

  toFloat32Array() {
    return this.#_native_self.toFloat32Array()
  }

  toFloat64Array() {
    return this.#_native_self.toFloat64Array()
  }

  toBoolInt8Array() {
    return this.#_native_self.toBoolInt8Array()
  }

  toInt16Array() {
    return this.#_native_self.toInt16Array()
  }

  toInt32Array() {
    return this.#_native_self.toInt32Array()
  }

  toInt64Array() {
    return this.#_native_self.toInt64Array()
  }

  toUint8Array() {
    return this.#_native_self.toUint8Array()
  }

  toUint16Array() {
    return this.#_native_self.toUint16Array()
  }

  toUint32Array() {
    return this.#_native_self.toUint32Array()
  }

  toUint64Array() {
    return this.#_native_self.toUint64Array()
  }

  toFloat32Scalar() {
    return this.#_native_self.toFloat32Scalar()
  }

  toFloat64Scalar() {
    return this.#_native_self.toFloat64Scalar()
  }

  toBoolInt8Scalar() {
    return this.#_native_self.toBoolInt8Scalar()
  }

  toInt16Scalar() {
    return this.#_native_self.toInt16Scalar()
  }

  toInt32Scalar() {
    return this.#_native_self.toInt32Scalar()
  }

  toInt64Scalar() {
    return this.#_native_self.toInt64Scalar()
  }

  toUint8Scalar() {
    return this.#_native_self.toUint8Scalar()
  }

  toUint16Scalar() {
    return this.#_native_self.toUint16Scalar()
  }

  toUint32Scalar() {
    return this.#_native_self.toUint32Scalar()
  }

  toUint64Scalar() {
    return this.#_native_self.toUint64Scalar()
  }

  eval() {
    return this.#_native_self.eval()
  }

  dispose() {
    return this.#_native_self.dispose()
  }
}

const mean = (input, axes, keepDims) => {
  return _mean(input._native_self, axes, keepDims)
}

const log = (tensor) => {
  return _log(tensor._native_self)
}

const tanh = (tensor) => {
  return _tanh(tensor._native_self)
}

const roll = (tensor, shift, axis) => {
  return _roll(tensor._native_self, shift, axis)
}

const isinf = (tensor) => {
  return _isinf(tensor._native_self)
}

const amax = (input, axes, keepDims) => {
  return _amax(input._native_self, axes, keepDims)
}

const sort = (input, axis, sortMode) => {
  return _sort(input._native_self, axis, sortMode)
}

const power = (lhs, rhs) => {
  return _power(lhs._native_self, rhs._native_self)
}

const median = (input, axes, keepDims) => {
  return _median(input._native_self, axes, keepDims)
}

const identity = (dim, type) => {
  return _identity(dim, type)
}

const reshape = (tensor, shape) => {
  return _reshape(tensor._native_self, shape)
}

const sin = (tensor) => {
  return _sin(tensor._native_self)
}

const sigmoid = (tensor) => {
  return _sigmoid(tensor._native_self)
}

const erf = (tensor) => {
  return _erf(tensor._native_self)
}

const flip = (tensor, dim) => {
  return _flip(tensor._native_self, dim)
}

const maximum = (lhs, rhs) => {
  return _maximum(lhs._native_self, rhs._native_self)
}

const matmul = (lhs, rhs, lhsProp, rhsProp) => {
  return _matmul(lhs._native_self, rhs._native_self, lhsProp, rhsProp)
}

const full = (dims, val, type) => {
  return _full(dims, val, type)
}

const iota = (dims, tileDims, type) => {
  return _iota(dims, tileDims, type)
}

const tile = (tensor, shape) => {
  return _tile(tensor._native_self, shape)
}

const floor = (tensor) => {
  return _floor(tensor._native_self)
}

const rint = (tensor) => {
  return _rint(tensor._native_self)
}

const sum = (input, axes, keepDims) => {
  return _sum(input._native_self, axes, keepDims)
}

const arange = (start, end, step, type) => {
  return _arange(start, end, step, type)
}

const logicalNot = (tensor) => {
  return _logicalNot(tensor._native_self)
}

const ceil = (tensor) => {
  return _ceil(tensor._native_self)
}

const amin = (input, axes, keepDims) => {
  return _amin(input._native_self, axes, keepDims)
}

const countNonzero = (input, axes, keepDims) => {
  return _countNonzero(input._native_self, axes, keepDims)
}

const _var = (input, axes, bias, keepDims) => {
  return __var(input._native_self, axes, bias, keepDims)
}

const all = (input, axes, keepDims) => {
  return _all(input._native_self, axes, keepDims)
}

const concatenate = (tensors, axis) => {
  return _concatenate(tensors, axis)
}

const tril = (tensor) => {
  return _tril(tensor._native_self)
}

const triu = (tensor) => {
  return _triu(tensor._native_self)
}

const where = (condition, x, y) => {
  return _where(condition._native_self, x._native_self, y._native_self)
}

const argmax = (input, axis, keepDims) => {
  return _argmax(input._native_self, axis, keepDims)
}

const minimum = (lhs, rhs) => {
  return _minimum(lhs._native_self, rhs._native_self)
}

const argmin = (input, axis, keepDims) => {
  return _argmin(input._native_self, axis, keepDims)
}

const std = (input, axes, keepDims) => {
  return _std(input._native_self, axes, keepDims)
}

const negative = (tensor) => {
  return _negative(tensor._native_self)
}

const log1p = (tensor) => {
  return _log1p(tensor._native_self)
}

const cos = (tensor) => {
  return _cos(tensor._native_self)
}

const sqrt = (tensor) => {
  return _sqrt(tensor._native_self)
}

const isnan = (tensor) => {
  return _isnan(tensor._native_self)
}

const nonzero = (tensor) => {
  return _nonzero(tensor._native_self)
}

const clip = (tensor, low, high) => {
  return _clip(tensor._native_self, low._native_self, high._native_self)
}

const sign = (tensor) => {
  return _sign(tensor._native_self)
}

const cumsum = (input, axis) => {
  return _cumsum(input._native_self, axis)
}

const transpose = (tensor, axes) => {
  return _transpose(tensor._native_self, axes)
}

const exp = (tensor) => {
  return _exp(tensor._native_self)
}

const absolute = (tensor) => {
  return _absolute(tensor._native_self)
}

const norm = (input, axes, p, keepDims) => {
  return _norm(input._native_self, axes, p, keepDims)
}

const any = (input, axes, keepDims) => {
  return _any(input._native_self, axes, keepDims)
}

const add = (lhs, rhs) => {
  return _add(lhs._native_self, rhs._native_self)
}

const eq = (lhs, rhs) => {
  return _eq(lhs._native_self, rhs._native_self)
}

const lShift = (lhs, rhs) => {
  return _lShift(lhs._native_self, rhs._native_self)
}

const mod = (lhs, rhs) => {
  return _mod(lhs._native_self, rhs._native_self)
}

const greaterThan = (lhs, rhs) => {
  return _greaterThan(lhs._native_self, rhs._native_self)
}

const rShift = (lhs, rhs) => {
  return _rShift(lhs._native_self, rhs._native_self)
}

const neq = (lhs, rhs) => {
  return _neq(lhs._native_self, rhs._native_self)
}

const greaterThanEqual = (lhs, rhs) => {
  return _greaterThanEqual(lhs._native_self, rhs._native_self)
}

const bitwiseAnd = (lhs, rhs) => {
  return _bitwiseAnd(lhs._native_self, rhs._native_self)
}

const lessThanEqual = (lhs, rhs) => {
  return _lessThanEqual(lhs._native_self, rhs._native_self)
}

const sub = (lhs, rhs) => {
  return _sub(lhs._native_self, rhs._native_self)
}

const bitwiseOr = (lhs, rhs) => {
  return _bitwiseOr(lhs._native_self, rhs._native_self)
}

const div = (lhs, rhs) => {
  return _div(lhs._native_self, rhs._native_self)
}

const lessThan = (lhs, rhs) => {
  return _lessThan(lhs._native_self, rhs._native_self)
}

const logicalOr = (lhs, rhs) => {
  return _logicalOr(lhs._native_self, rhs._native_self)
}

const mul = (lhs, rhs) => {
  return _mul(lhs._native_self, rhs._native_self)
}

const logicalAnd = (lhs, rhs) => {
  return _logicalAnd(lhs._native_self, rhs._native_self)
}

const bitwiseXor = (lhs, rhs) => {
  return _bitwiseXor(lhs._native_self, rhs._native_self)
}

const init = () => {
  return _init()
}

const bytesUsed = () => {
  return _bytesUsed()
}

const setRowMajor = () => {
  return _setRowMajor()
}

const setColMajor = () => {
  return _setColMajor()
}

const isRowMajor = () => {
  return _isRowMajor()
}

const isColMajor = () => {
  return _isColMajor()
}

const dtypeFloat32 = () => {
  return _dtypeFloat32()
}

const dtypeFloat64 = () => {
  return _dtypeFloat64()
}

const dtypeBoolInt8 = () => {
  return _dtypeBoolInt8()
}

const dtypeInt16 = () => {
  return _dtypeInt16()
}

const dtypeInt32 = () => {
  return _dtypeInt32()
}

const dtypeInt64 = () => {
  return _dtypeInt64()
}

const dtypeUint8 = () => {
  return _dtypeUint8()
}

const dtypeUint16 = () => {
  return _dtypeUint16()
}

const dtypeUint32 = () => {
  return _dtypeUint32()
}

const dtypeUint64 = () => {
  return _dtypeUint64()
}

const rand = (shape) => {
  return _rand(shape)
}

const randn = (shape) => {
  return _randn(shape)
}

module.exports = {
  Tensor,
  full,
  iota,
  tile,
  floor,
  rint,
  flip,
  maximum,
  matmul,
  sum,
  arange,
  logicalNot,
  ceil,
  amin,
  countNonzero,
  concatenate,
  tril,
  triu,
  where,
  argmax,
  _var,
  all,
  negative,
  log1p,
  cos,
  sqrt,
  isnan,
  minimum,
  argmin,
  std,
  nonzero,
  clip,
  sign,
  cumsum,
  transpose,
  exp,
  absolute,
  norm,
  any,
  log,
  tanh,
  roll,
  isinf,
  amax,
  mean,
  identity,
  reshape,
  sin,
  sigmoid,
  erf,
  sort,
  power,
  median,
  lessThan,
  logicalOr,
  mul,
  logicalAnd,
  bitwiseXor,
  eq,
  lShift,
  mod,
  greaterThan,
  rShift,
  neq,
  greaterThanEqual,
  add,
  bitwiseAnd,
  lessThanEqual,
  sub,
  bitwiseOr,
  div,
  init,
  bytesUsed,
  setRowMajor,
  setColMajor,
  isRowMajor,
  isColMajor,
  dtypeFloat32,
  dtypeFloat64,
  dtypeBoolInt8,
  dtypeInt16,
  dtypeInt32,
  dtypeInt64,
  dtypeUint8,
  dtypeUint16,
  dtypeUint32,
  dtypeUint64,
  rand,
  randn
}
