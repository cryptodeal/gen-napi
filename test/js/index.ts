// Code generated by gen-napi. DO NOT EDIT.
const {
  _Tensor,
  _nonzero,
  _ceil,
  _erf,
  _isinf,
  _where,
  _power,
  _iota,
  _reshape,
  _std,
  _norm,
  _matmul,
  _amin,
  _log1p,
  _roll,
  _amax,
  _full,
  _exp,
  _negative,
  _rint,
  _var: __var,
  _identity,
  _tile,
  _sigmoid,
  _maximum,
  _any,
  _log,
  _cos,
  _clip,
  _triu,
  _argmax,
  _mean,
  _countNonzero,
  _absolute,
  _flip,
  _floor,
  _cumsum,
  _concatenate,
  _sin,
  _sign,
  _sort,
  _argmin,
  _arange,
  _tanh,
  _sqrt,
  _isnan,
  _tril,
  _minimum,
  _sum,
  _median,
  _transpose,
  _logicalNot,
  _all,
  _mul,
  _lessThanEqual,
  _greaterThanEqual,
  _lShift,
  _neq,
  _logicalOr,
  _bitwiseXor,
  _mod,
  _bitwiseOr,
  _lessThan,
  _greaterThan,
  _logicalAnd,
  _add,
  _sub,
  _eq,
  _div,
  _bitwiseAnd,
  _rShift,
  _init,
  _bytesUsed,
  _setRowMajor,
  _setColMajor,
  _isRowMajor,
  _isColMajor,
  _dtypeFloat32,
  _dtypeFloat64,
  _dtypeBoolInt8,
  _dtypeInt16,
  _dtypeInt32,
  _dtypeInt64,
  _dtypeUint8,
  _dtypeUint16,
  _dtypeUint32,
  _dtypeUint64,
  _rand,
  _randn
} = require('../../build/Release/flashlight_napi_bindings.node')

export class Tensor {
  #_native_self: any

  constructor(t) {
    this.#_native_self = new _Tensor(t)
  }

  get _native_self() {
    return this.#_native_self
  }

  exp(): Tensor {
    return this.#_native_self.exp()
  }

  log1p(): Tensor {
    return this.#_native_self.log1p()
  }

  roll(shift: number, axis: number): Tensor {
    return this.#_native_self.roll(shift, axis)
  }

  amax(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.amax(axes, keepDims)
  }

  tile(shape: number[]): Tensor {
    return this.#_native_self.tile(shape)
  }

  negative(): Tensor {
    return this.#_native_self.negative()
  }

  rint(): Tensor {
    return this.#_native_self.rint()
  }

  var(axes: number[], bias: boolean, keepDims: boolean): Tensor {
    return this.#_native_self.var(axes, bias, keepDims)
  }

  log(): Tensor {
    return this.#_native_self.log()
  }

  cos(): Tensor {
    return this.#_native_self.cos()
  }

  sigmoid(): Tensor {
    return this.#_native_self.sigmoid()
  }

  maximum(rhs: Tensor): Tensor {
    return this.#_native_self.maximum(rhs.#_native_self)
  }

  any(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.any(axes, keepDims)
  }

  absolute(): Tensor {
    return this.#_native_self.absolute()
  }

  flip(dim: number): Tensor {
    return this.#_native_self.flip(dim)
  }

  clip(low: Tensor, high: Tensor): Tensor {
    return this.#_native_self.clip(low.#_native_self, high.#_native_self)
  }

  triu(): Tensor {
    return this.#_native_self.triu()
  }

  mean(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.mean(axes, keepDims)
  }

  countNonzero(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.countNonzero(axes, keepDims)
  }

  sin(): Tensor {
    return this.#_native_self.sin()
  }

  floor(): Tensor {
    return this.#_native_self.floor()
  }

  cumsum(axis: number): Tensor {
    return this.#_native_self.cumsum(axis)
  }

  tanh(): Tensor {
    return this.#_native_self.tanh()
  }

  sign(): Tensor {
    return this.#_native_self.sign()
  }

  sort(axis: number, sortMode: SortMode): Tensor {
    return this.#_native_self.sort(axis, sortMode)
  }

  argmin(axis: number, keepDims: boolean): Tensor {
    return this.#_native_self.argmin(axis, keepDims)
  }

  transpose(axes: number[]): Tensor {
    return this.#_native_self.transpose(axes)
  }

  logicalNot(): Tensor {
    return this.#_native_self.logicalNot()
  }

  sqrt(): Tensor {
    return this.#_native_self.sqrt()
  }

  isnan(): Tensor {
    return this.#_native_self.isnan()
  }

  tril(): Tensor {
    return this.#_native_self.tril()
  }

  sum(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.sum(axes, keepDims)
  }

  median(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.median(axes, keepDims)
  }

  all(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.all(axes, keepDims)
  }

  reshape(shape: number[]): Tensor {
    return this.#_native_self.reshape(shape)
  }

  nonzero(): Tensor {
    return this.#_native_self.nonzero()
  }

  ceil(): Tensor {
    return this.#_native_self.ceil()
  }

  erf(): Tensor {
    return this.#_native_self.erf()
  }

  isinf(): Tensor {
    return this.#_native_self.isinf()
  }

  where(x: Tensor, y: Tensor): Tensor {
    return this.#_native_self.where(x.#_native_self, y.#_native_self)
  }

  power(rhs: Tensor): Tensor {
    return this.#_native_self.power(rhs.#_native_self)
  }

  matmul(rhs: Tensor, lhsProp: MatrixProperty, rhsProp: MatrixProperty): Tensor {
    return this.#_native_self.matmul(rhs.#_native_self, lhsProp, rhsProp)
  }

  amin(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.amin(axes, keepDims)
  }

  std(axes: number[], keepDims: boolean): Tensor {
    return this.#_native_self.std(axes, keepDims)
  }

  norm(axes: number[], p: number, keepDims: boolean): Tensor {
    return this.#_native_self.norm(axes, p, keepDims)
  }

  add(rhs: Tensor): Tensor {
    return this.#_native_self.add(rhs.#_native_self)
  }

  sub(rhs: Tensor): Tensor {
    return this.#_native_self.sub(rhs.#_native_self)
  }

  eq(rhs: Tensor): Tensor {
    return this.#_native_self.eq(rhs.#_native_self)
  }

  greaterThan(rhs: Tensor): Tensor {
    return this.#_native_self.greaterThan(rhs.#_native_self)
  }

  logicalAnd(rhs: Tensor): Tensor {
    return this.#_native_self.logicalAnd(rhs.#_native_self)
  }

  div(rhs: Tensor): Tensor {
    return this.#_native_self.div(rhs.#_native_self)
  }

  bitwiseAnd(rhs: Tensor): Tensor {
    return this.#_native_self.bitwiseAnd(rhs.#_native_self)
  }

  rShift(rhs: Tensor): Tensor {
    return this.#_native_self.rShift(rhs.#_native_self)
  }

  lessThanEqual(rhs: Tensor): Tensor {
    return this.#_native_self.lessThanEqual(rhs.#_native_self)
  }

  greaterThanEqual(rhs: Tensor): Tensor {
    return this.#_native_self.greaterThanEqual(rhs.#_native_self)
  }

  lShift(rhs: Tensor): Tensor {
    return this.#_native_self.lShift(rhs.#_native_self)
  }

  mul(rhs: Tensor): Tensor {
    return this.#_native_self.mul(rhs.#_native_self)
  }

  bitwiseXor(rhs: Tensor): Tensor {
    return this.#_native_self.bitwiseXor(rhs.#_native_self)
  }

  mod(rhs: Tensor): Tensor {
    return this.#_native_self.mod(rhs.#_native_self)
  }

  bitwiseOr(rhs: Tensor): Tensor {
    return this.#_native_self.bitwiseOr(rhs.#_native_self)
  }

  lessThan(rhs: Tensor): Tensor {
    return this.#_native_self.lessThan(rhs.#_native_self)
  }

  neq(rhs: Tensor): Tensor {
    return this.#_native_self.neq(rhs.#_native_self)
  }

  logicalOr(rhs: Tensor): Tensor {
    return this.#_native_self.logicalOr(rhs.#_native_self)
  }

  copy(): void {
    return this.#_native_self.copy()
  }

  shape(): void {
    return this.#_native_self.shape()
  }

  elements(): void {
    return this.#_native_self.elements()
  }

  ndim(): void {
    return this.#_native_self.ndim()
  }

  isEmpty(): void {
    return this.#_native_self.isEmpty()
  }

  bytes(): void {
    return this.#_native_self.bytes()
  }

  type(): void {
    return this.#_native_self.type()
  }

  isSparse(): void {
    return this.#_native_self.isSparse()
  }

  strides(): void {
    return this.#_native_self.strides()
  }

  astype(): void {
    return this.#_native_self.astype()
  }

  flatten(): void {
    return this.#_native_self.flatten()
  }

  asContiguousTensor(): void {
    return this.#_native_self.asContiguousTensor()
  }

  isContiguous(): void {
    return this.#_native_self.isContiguous()
  }

  toFloat32Array(): Float32Array {
    return this.#_native_self.toFloat32Array()
  }

  toFloat64Array(): Float64Array {
    return this.#_native_self.toFloat64Array()
  }

  toBoolInt8Array(): Int8Array {
    return this.#_native_self.toBoolInt8Array()
  }

  toInt16Array(): Int16Array {
    return this.#_native_self.toInt16Array()
  }

  toInt32Array(): Int32Array {
    return this.#_native_self.toInt32Array()
  }

  toInt64Array(): BigInt64Array {
    return this.#_native_self.toInt64Array()
  }

  toUint8Array(): Uint8Array {
    return this.#_native_self.toUint8Array()
  }

  toUint16Array(): Uint16Array {
    return this.#_native_self.toUint16Array()
  }

  toUint32Array(): Uint32Array {
    return this.#_native_self.toUint32Array()
  }

  toUint64Array(): BigUint64Array {
    return this.#_native_self.toUint64Array()
  }

  toFloat32Scalar(): number {
    return this.#_native_self.toFloat32Scalar()
  }

  toFloat64Scalar(): number {
    return this.#_native_self.toFloat64Scalar()
  }

  toBoolInt8Scalar(): number {
    return this.#_native_self.toBoolInt8Scalar()
  }

  toInt16Scalar(): number {
    return this.#_native_self.toInt16Scalar()
  }

  toInt32Scalar(): number {
    return this.#_native_self.toInt32Scalar()
  }

  toInt64Scalar(): bigint {
    return this.#_native_self.toInt64Scalar()
  }

  toUint8Scalar(): number {
    return this.#_native_self.toUint8Scalar()
  }

  toUint16Scalar(): number {
    return this.#_native_self.toUint16Scalar()
  }

  toUint32Scalar(): number {
    return this.#_native_self.toUint32Scalar()
  }

  toUint64Scalar(): bigint {
    return this.#_native_self.toUint64Scalar()
  }

  eval(): void {
    return this.#_native_self.eval()
  }

  dispose(): void {
    return this.#_native_self.dispose()
  }
}

export const arange = (start: T, end: T, step: T, type: number) => {
  return _arange(start, end, step, type)
}

export const tanh = (tensor: Tensor) => {
  return _tanh(tensor._native_self)
}

export const sign = (tensor: Tensor) => {
  return _sign(tensor._native_self)
}

export const sort = (input: Tensor, axis: number, sortMode: SortMode) => {
  return _sort(input._native_self, axis, sortMode)
}

export const argmin = (input: Tensor, axis: number, keepDims: boolean) => {
  return _argmin(input._native_self, axis, keepDims)
}

export const minimum = (lhs: Tensor, rhs: Tensor) => {
  return _minimum(lhs._native_self, rhs._native_self)
}

export const sum = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _sum(input._native_self, axes, keepDims)
}

export const median = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _median(input._native_self, axes, keepDims)
}

export const transpose = (tensor: Tensor, axes: number[]) => {
  return _transpose(tensor._native_self, axes)
}

export const logicalNot = (tensor: Tensor) => {
  return _logicalNot(tensor._native_self)
}

export const sqrt = (tensor: Tensor) => {
  return _sqrt(tensor._native_self)
}

export const isnan = (tensor: Tensor) => {
  return _isnan(tensor._native_self)
}

export const tril = (tensor: Tensor) => {
  return _tril(tensor._native_self)
}

export const all = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _all(input._native_self, axes, keepDims)
}

export const isinf = (tensor: Tensor) => {
  return _isinf(tensor._native_self)
}

export const where = (condition: Tensor, x: Tensor, y: Tensor) => {
  return _where(condition._native_self, x._native_self, y._native_self)
}

export const power = (lhs: Tensor, rhs: Tensor) => {
  return _power(lhs._native_self, rhs._native_self)
}

export const iota = (dims: number[], tileDims: number[], type: number) => {
  return _iota(dims, tileDims, type)
}

export const reshape = (tensor: Tensor, shape: number[]) => {
  return _reshape(tensor._native_self, shape)
}

export const nonzero = (tensor: Tensor) => {
  return _nonzero(tensor._native_self)
}

export const ceil = (tensor: Tensor) => {
  return _ceil(tensor._native_self)
}

export const erf = (tensor: Tensor) => {
  return _erf(tensor._native_self)
}

export const matmul = (
  lhs: Tensor,
  rhs: Tensor,
  lhsProp: MatrixProperty,
  rhsProp: MatrixProperty
) => {
  return _matmul(lhs._native_self, rhs._native_self, lhsProp, rhsProp)
}

export const amin = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _amin(input._native_self, axes, keepDims)
}

export const std = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _std(input._native_self, axes, keepDims)
}

export const norm = (input: Tensor, axes: number[], p: number, keepDims: boolean) => {
  return _norm(input._native_self, axes, p, keepDims)
}

export const full = (dims: number[], val: T, type: number) => {
  return _full(dims, val, type)
}

export const exp = (tensor: Tensor) => {
  return _exp(tensor._native_self)
}

export const log1p = (tensor: Tensor) => {
  return _log1p(tensor._native_self)
}

export const roll = (tensor: Tensor, shift: number, axis: number) => {
  return _roll(tensor._native_self, shift, axis)
}

export const amax = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _amax(input._native_self, axes, keepDims)
}

export const identity = (dim: number, type: number) => {
  return _identity(dim, type)
}

export const tile = (tensor: Tensor, shape: number[]) => {
  return _tile(tensor._native_self, shape)
}

export const negative = (tensor: Tensor) => {
  return _negative(tensor._native_self)
}

export const rint = (tensor: Tensor) => {
  return _rint(tensor._native_self)
}

export const _var = (input: Tensor, axes: number[], bias: boolean, keepDims: boolean) => {
  return __var(input._native_self, axes, bias, keepDims)
}

export const log = (tensor: Tensor) => {
  return _log(tensor._native_self)
}

export const cos = (tensor: Tensor) => {
  return _cos(tensor._native_self)
}

export const sigmoid = (tensor: Tensor) => {
  return _sigmoid(tensor._native_self)
}

export const maximum = (lhs: Tensor, rhs: Tensor) => {
  return _maximum(lhs._native_self, rhs._native_self)
}

export const any = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _any(input._native_self, axes, keepDims)
}

export const mean = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _mean(input._native_self, axes, keepDims)
}

export const countNonzero = (input: Tensor, axes: number[], keepDims: boolean) => {
  return _countNonzero(input._native_self, axes, keepDims)
}

export const absolute = (tensor: Tensor) => {
  return _absolute(tensor._native_self)
}

export const flip = (tensor: Tensor, dim: number) => {
  return _flip(tensor._native_self, dim)
}

export const clip = (tensor: Tensor, low: Tensor, high: Tensor) => {
  return _clip(tensor._native_self, low._native_self, high._native_self)
}

export const triu = (tensor: Tensor) => {
  return _triu(tensor._native_self)
}

export const argmax = (input: Tensor, axis: number, keepDims: boolean) => {
  return _argmax(input._native_self, axis, keepDims)
}

export const concatenate = (tensors: Tensor[], axis: number) => {
  return _concatenate(tensors, axis)
}

export const sin = (tensor: Tensor) => {
  return _sin(tensor._native_self)
}

export const floor = (tensor: Tensor) => {
  return _floor(tensor._native_self)
}

export const cumsum = (input: Tensor, axis: number) => {
  return _cumsum(input._native_self, axis)
}

export const div = (lhs: Tensor, rhs: Tensor) => {
  return _div(lhs._native_self, rhs._native_self)
}

export const bitwiseAnd = (lhs: Tensor, rhs: Tensor) => {
  return _bitwiseAnd(lhs._native_self, rhs._native_self)
}

export const rShift = (lhs: Tensor, rhs: Tensor) => {
  return _rShift(lhs._native_self, rhs._native_self)
}

export const mul = (lhs: Tensor, rhs: Tensor) => {
  return _mul(lhs._native_self, rhs._native_self)
}

export const lessThanEqual = (lhs: Tensor, rhs: Tensor) => {
  return _lessThanEqual(lhs._native_self, rhs._native_self)
}

export const greaterThanEqual = (lhs: Tensor, rhs: Tensor) => {
  return _greaterThanEqual(lhs._native_self, rhs._native_self)
}

export const lShift = (lhs: Tensor, rhs: Tensor) => {
  return _lShift(lhs._native_self, rhs._native_self)
}

export const neq = (lhs: Tensor, rhs: Tensor) => {
  return _neq(lhs._native_self, rhs._native_self)
}

export const logicalOr = (lhs: Tensor, rhs: Tensor) => {
  return _logicalOr(lhs._native_self, rhs._native_self)
}

export const bitwiseXor = (lhs: Tensor, rhs: Tensor) => {
  return _bitwiseXor(lhs._native_self, rhs._native_self)
}

export const mod = (lhs: Tensor, rhs: Tensor) => {
  return _mod(lhs._native_self, rhs._native_self)
}

export const bitwiseOr = (lhs: Tensor, rhs: Tensor) => {
  return _bitwiseOr(lhs._native_self, rhs._native_self)
}

export const lessThan = (lhs: Tensor, rhs: Tensor) => {
  return _lessThan(lhs._native_self, rhs._native_self)
}

export const greaterThan = (lhs: Tensor, rhs: Tensor) => {
  return _greaterThan(lhs._native_self, rhs._native_self)
}

export const logicalAnd = (lhs: Tensor, rhs: Tensor) => {
  return _logicalAnd(lhs._native_self, rhs._native_self)
}

export const add = (lhs: Tensor, rhs: Tensor) => {
  return _add(lhs._native_self, rhs._native_self)
}

export const sub = (lhs: Tensor, rhs: Tensor) => {
  return _sub(lhs._native_self, rhs._native_self)
}

export const eq = (lhs: Tensor, rhs: Tensor) => {
  return _eq(lhs._native_self, rhs._native_self)
}

export const init = () => {
  return _init()
}

export const bytesUsed = (): bigint => {
  return _bytesUsed()
}

export const setRowMajor = () => {
  return _setRowMajor()
}

export const setColMajor = () => {
  return _setColMajor()
}

export const isRowMajor = (): boolean => {
  return _isRowMajor()
}

export const isColMajor = (): boolean => {
  return _isColMajor()
}

export const dtypeFloat32 = (): number => {
  return _dtypeFloat32()
}

export const dtypeFloat64 = (): number => {
  return _dtypeFloat64()
}

export const dtypeBoolInt8 = (): number => {
  return _dtypeBoolInt8()
}

export const dtypeInt16 = (): number => {
  return _dtypeInt16()
}

export const dtypeInt32 = (): number => {
  return _dtypeInt32()
}

export const dtypeInt64 = (): number => {
  return _dtypeInt64()
}

export const dtypeUint8 = (): number => {
  return _dtypeUint8()
}

export const dtypeUint16 = (): number => {
  return _dtypeUint16()
}

export const dtypeUint32 = (): number => {
  return _dtypeUint32()
}

export const dtypeUint64 = (): number => {
  return _dtypeUint64()
}

export const rand = (shape: number[]): Tensor => {
  return _rand(shape)
}

export const randn = (shape: number[]): Tensor => {
  return _randn(shape)
}
