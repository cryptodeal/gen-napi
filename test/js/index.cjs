// Code generated by gen-napi. DO NOT EDIT.
const {
  _Tensor,
  _sort,
  _amax,
  _argmax,
  _mean,
  _countNonzero,
  _exp,
  _log,
  _where,
  _flip,
  _tril,
  _triu,
  _cumsum,
  _norm,
  _iota,
  _absolute,
  _erf,
  _any,
  _argmin,
  _roll,
  _isnan,
  _maximum,
  _sign,
  _power,
  _matmul,
  _all,
  _arange,
  _concatenate,
  _nonzero,
  _median,
  __var,
  _sin,
  _sqrt,
  _isinf,
  _rint,
  _std,
  _identity,
  _logicalNot,
  _cos,
  _sum,
  _full,
  _log1p,
  _sigmoid,
  _negative,
  _tanh,
  _floor,
  _ceil,
  _clip,
  _reshape,
  _transpose,
  _tile,
  _minimum,
  _amin,
  _logicalOr,
  _greaterThan,
  _sub,
  _mul,
  _greaterThanEqual,
  _lShift,
  _lessThan,
  _bitwiseAnd,
  _add,
  _lessThanEqual,
  _bitwiseOr,
  _rShift,
  _eq,
  _logicalAnd,
  _mod,
  _neq,
  _div,
  _bitwiseXor
} = require('../../build/Release/flashlight_napi_bindings.node')

class Tensor {
  #_native_self

  constructor(t) {
    this.#_native_self = new _Tensor(t)
  }

  all(axes, keepDims) {
    return this.#_native_self.all(this.#_native_self, axes, keepDims)
  }

  nonzero() {
    return this.#_native_self.nonzero(this.#_native_self)
  }

  sign() {
    return this.#_native_self.sign(this.#_native_self)
  }

  power(rhs) {
    return this.#_native_self.power(this.#_native_self, rhs)
  }

  matmul(rhs, lhsProp, rhsProp) {
    return this.#_native_self.matmul(this.#_native_self, rhs, lhsProp, rhsProp)
  }

  sin() {
    return this.#_native_self.sin(this.#_native_self)
  }

  sqrt() {
    return this.#_native_self.sqrt(this.#_native_self)
  }

  isinf() {
    return this.#_native_self.isinf(this.#_native_self)
  }

  median(axes, keepDims) {
    return this.#_native_self.median(this.#_native_self, axes, keepDims)
  }

  var(axes, bias, keepDims) {
    return this.#_native_self.var(this.#_native_self, axes, bias, keepDims)
  }

  logicalNot() {
    return this.#_native_self.logicalNot(this.#_native_self)
  }

  cos() {
    return this.#_native_self.cos(this.#_native_self)
  }

  rint() {
    return this.#_native_self.rint(this.#_native_self)
  }

  std(axes, keepDims) {
    return this.#_native_self.std(this.#_native_self, axes, keepDims)
  }

  log1p() {
    return this.#_native_self.log1p(this.#_native_self)
  }

  sigmoid() {
    return this.#_native_self.sigmoid(this.#_native_self)
  }

  sum(axes, keepDims) {
    return this.#_native_self.sum(this.#_native_self, axes, keepDims)
  }

  ceil() {
    return this.#_native_self.ceil(this.#_native_self)
  }

  clip(low, high) {
    return this.#_native_self.clip(this.#_native_self, low, high)
  }

  reshape(shape) {
    return this.#_native_self.reshape(this.#_native_self, shape)
  }

  transpose(axes) {
    return this.#_native_self.transpose(this.#_native_self, axes)
  }

  tile(shape) {
    return this.#_native_self.tile(this.#_native_self, shape)
  }

  negative() {
    return this.#_native_self.negative(this.#_native_self)
  }

  tanh() {
    return this.#_native_self.tanh(this.#_native_self)
  }

  floor() {
    return this.#_native_self.floor(this.#_native_self)
  }

  amin(axes, keepDims) {
    return this.#_native_self.amin(this.#_native_self, axes, keepDims)
  }

  mean(axes, keepDims) {
    return this.#_native_self.mean(this.#_native_self, axes, keepDims)
  }

  countNonzero(axes, keepDims) {
    return this.#_native_self.countNonzero(this.#_native_self, axes, keepDims)
  }

  exp() {
    return this.#_native_self.exp(this.#_native_self)
  }

  log() {
    return this.#_native_self.log(this.#_native_self)
  }

  where(x, y) {
    return this.#_native_self.where(this.#_native_self, x, y)
  }

  sort(axis, sortMode) {
    return this.#_native_self.sort(this.#_native_self, axis, sortMode)
  }

  amax(axes, keepDims) {
    return this.#_native_self.amax(this.#_native_self, axes, keepDims)
  }

  cumsum(axis) {
    return this.#_native_self.cumsum(this.#_native_self, axis)
  }

  norm(axes, p, keepDims) {
    return this.#_native_self.norm(this.#_native_self, axes, p, keepDims)
  }

  absolute() {
    return this.#_native_self.absolute(this.#_native_self)
  }

  erf() {
    return this.#_native_self.erf(this.#_native_self)
  }

  flip(dim) {
    return this.#_native_self.flip(this.#_native_self, dim)
  }

  tril() {
    return this.#_native_self.tril(this.#_native_self)
  }

  triu() {
    return this.#_native_self.triu(this.#_native_self)
  }

  any(axes, keepDims) {
    return this.#_native_self.any(this.#_native_self, axes, keepDims)
  }

  roll(shift, axis) {
    return this.#_native_self.roll(this.#_native_self, shift, axis)
  }

  isnan() {
    return this.#_native_self.isnan(this.#_native_self)
  }

  maximum(rhs) {
    return this.#_native_self.maximum(this.#_native_self, rhs)
  }

  argmin(axis, keepDims) {
    return this.#_native_self.argmin(this.#_native_self, axis, keepDims)
  }
}

const cumsum = (input, axis) => {
  return _cumsum(input, axis)
}

const norm = (input, axes, p, keepDims) => {
  return _norm(input, axes, p, keepDims)
}

const iota = (dims, tileDims, type) => {
  return _iota(dims, tileDims, type)
}

const absolute = (tensor) => {
  return _absolute(tensor)
}

const erf = (tensor) => {
  return _erf(tensor)
}

const flip = (tensor, dim) => {
  return _flip(tensor, dim)
}

const tril = (tensor) => {
  return _tril(tensor)
}

const triu = (tensor) => {
  return _triu(tensor)
}

const any = (input, axes, keepDims) => {
  return _any(input, axes, keepDims)
}

const roll = (tensor, shift, axis) => {
  return _roll(tensor, shift, axis)
}

const isnan = (tensor) => {
  return _isnan(tensor)
}

const maximum = (lhs, rhs) => {
  return _maximum(lhs, rhs)
}

const argmin = (input, axis, keepDims) => {
  return _argmin(input, axis, keepDims)
}

const all = (input, axes, keepDims) => {
  return _all(input, axes, keepDims)
}

const arange = (start, end, step, type) => {
  return _arange(start, end, step, type)
}

const concatenate = (tensors, axis) => {
  return _concatenate(tensors, axis)
}

const nonzero = (tensor) => {
  return _nonzero(tensor)
}

const sign = (tensor) => {
  return _sign(tensor)
}

const power = (lhs, rhs) => {
  return _power(lhs, rhs)
}

const matmul = (lhs, rhs, lhsProp, rhsProp) => {
  return _matmul(lhs, rhs, lhsProp, rhsProp)
}

const sin = (tensor) => {
  return _sin(tensor)
}

const sqrt = (tensor) => {
  return _sqrt(tensor)
}

const isinf = (tensor) => {
  return _isinf(tensor)
}

const median = (input, axes, keepDims) => {
  return _median(input, axes, keepDims)
}

const _var = (input, axes, bias, keepDims) => {
  return __var(input, axes, bias, keepDims)
}

const identity = (dim, type) => {
  return _identity(dim, type)
}

const logicalNot = (tensor) => {
  return _logicalNot(tensor)
}

const cos = (tensor) => {
  return _cos(tensor)
}

const rint = (tensor) => {
  return _rint(tensor)
}

const std = (input, axes, keepDims) => {
  return _std(input, axes, keepDims)
}

const full = (dims, val, type) => {
  return _full(dims, val, type)
}

const log1p = (tensor) => {
  return _log1p(tensor)
}

const sigmoid = (tensor) => {
  return _sigmoid(tensor)
}

const sum = (input, axes, keepDims) => {
  return _sum(input, axes, keepDims)
}

const ceil = (tensor) => {
  return _ceil(tensor)
}

const clip = (tensor, low, high) => {
  return _clip(tensor, low, high)
}

const reshape = (tensor, shape) => {
  return _reshape(tensor, shape)
}

const transpose = (tensor, axes) => {
  return _transpose(tensor, axes)
}

const tile = (tensor, shape) => {
  return _tile(tensor, shape)
}

const negative = (tensor) => {
  return _negative(tensor)
}

const tanh = (tensor) => {
  return _tanh(tensor)
}

const floor = (tensor) => {
  return _floor(tensor)
}

const minimum = (lhs, rhs) => {
  return _minimum(lhs, rhs)
}

const amin = (input, axes, keepDims) => {
  return _amin(input, axes, keepDims)
}

const mean = (input, axes, keepDims) => {
  return _mean(input, axes, keepDims)
}

const countNonzero = (input, axes, keepDims) => {
  return _countNonzero(input, axes, keepDims)
}

const exp = (tensor) => {
  return _exp(tensor)
}

const log = (tensor) => {
  return _log(tensor)
}

const where = (condition, x, y) => {
  return _where(condition, x, y)
}

const sort = (input, axis, sortMode) => {
  return _sort(input, axis, sortMode)
}

const amax = (input, axes, keepDims) => {
  return _amax(input, axes, keepDims)
}

const argmax = (input, axis, keepDims) => {
  return _argmax(input, axis, keepDims)
}

const add = (lhs, rhs) => {
  return _add(lhs, rhs)
}

const lessThanEqual = (lhs, rhs) => {
  return _lessThanEqual(lhs, rhs)
}

const bitwiseOr = (lhs, rhs) => {
  return _bitwiseOr(lhs, rhs)
}

const lessThan = (lhs, rhs) => {
  return _lessThan(lhs, rhs)
}

const bitwiseAnd = (lhs, rhs) => {
  return _bitwiseAnd(lhs, rhs)
}

const logicalAnd = (lhs, rhs) => {
  return _logicalAnd(lhs, rhs)
}

const mod = (lhs, rhs) => {
  return _mod(lhs, rhs)
}

const neq = (lhs, rhs) => {
  return _neq(lhs, rhs)
}

const div = (lhs, rhs) => {
  return _div(lhs, rhs)
}

const bitwiseXor = (lhs, rhs) => {
  return _bitwiseXor(lhs, rhs)
}

const rShift = (lhs, rhs) => {
  return _rShift(lhs, rhs)
}

const eq = (lhs, rhs) => {
  return _eq(lhs, rhs)
}

const sub = (lhs, rhs) => {
  return _sub(lhs, rhs)
}

const logicalOr = (lhs, rhs) => {
  return _logicalOr(lhs, rhs)
}

const greaterThan = (lhs, rhs) => {
  return _greaterThan(lhs, rhs)
}

const lShift = (lhs, rhs) => {
  return _lShift(lhs, rhs)
}

const mul = (lhs, rhs) => {
  return _mul(lhs, rhs)
}

const greaterThanEqual = (lhs, rhs) => {
  return _greaterThanEqual(lhs, rhs)
}

module.exports = {
  Tensor,
  log1p,
  sigmoid,
  sum,
  full,
  transpose,
  tile,
  negative,
  tanh,
  floor,
  ceil,
  clip,
  reshape,
  amin,
  minimum,
  log,
  where,
  sort,
  amax,
  argmax,
  mean,
  countNonzero,
  exp,
  absolute,
  erf,
  flip,
  tril,
  triu,
  cumsum,
  norm,
  iota,
  any,
  isnan,
  maximum,
  argmin,
  roll,
  concatenate,
  nonzero,
  sign,
  power,
  matmul,
  all,
  arange,
  sqrt,
  isinf,
  median,
  _var,
  sin,
  logicalNot,
  cos,
  rint,
  std,
  identity,
  mul,
  greaterThanEqual,
  lShift,
  lessThan,
  bitwiseAnd,
  add,
  lessThanEqual,
  bitwiseOr,
  rShift,
  eq,
  logicalAnd,
  mod,
  neq,
  div,
  bitwiseXor,
  logicalOr,
  greaterThan,
  sub
}
