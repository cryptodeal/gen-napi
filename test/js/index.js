// Code generated by gen-napi. DO NOT EDIT.
const {
	_Tensor,
	_var,
	_sqrt,
	_sigmoid,
	_transpose,
	_negative,
	_exp,
	_floor,
	_rint,
	_absolute,
	_identity,
	_reshape,
	_median,
	_isnan,
	_triu,
	_log1p,
	_isinf,
	_sort,
	_maximum,
	_argmin,
	_countNonzero,
	_arange,
	_concatenate,
	_cos,
	_tanh,
	_flip,
	_cumsum,
	_norm,
	_logicalNot,
	_sin,
	_where,
	_sum,
	_full,
	_tile,
	_argmax,
	_mean,
	_any,
	_all,
	_tril,
	_minimum,
	_ceil,
	_erf,
	_sign,
	_power,
	_amin,
	_amax,
	_iota,
	_log,
	_std,
	_roll,
	_matmul,
	_nonzero,
	_clip,
	_bitwiseAnd,
	_bitwiseXor,
	_greaterThan,
	_greaterThanEqual,
	_lessThanEqual,
	_mod,
	_logicalOr,
	_bitwiseOr,
	_lessThan,
	_neq,
	_eq,
	_lShift,
	_sub,
	_logicalAnd,
	_add,
	_div,
	_rShift,
	_mul
} = require("../../build/Release/flashlight_napi_bindings.node")

class Tensor {
	#_native_self

	constructor(t) {
		this.#_native_self = new _Tensor(t);
	}

	countNonzero(axes, keepDims) {
		return this.#_native_self.countNonzero(this.#_native_self,axes, keepDims);
	}

	log1p() {
		return this.#_native_self.log1p(this.#_native_self,);
	}

	isinf() {
		return this.#_native_self.isinf(this.#_native_self,);
	}

	sort(axis, sortMode) {
		return this.#_native_self.sort(this.#_native_self,axis, sortMode);
	}

	maximum(rhs) {
		return this.#_native_self.maximum(this.#_native_self,rhs);
	}

	argmin(axis, keepDims) {
		return this.#_native_self.argmin(this.#_native_self,axis, keepDims);
	}

	logicalNot() {
		return this.#_native_self.logicalNot(this.#_native_self,);
	}

	sin() {
		return this.#_native_self.sin(this.#_native_self,);
	}

	cos() {
		return this.#_native_self.cos(this.#_native_self,);
	}

	tanh() {
		return this.#_native_self.tanh(this.#_native_self,);
	}

	flip(dim) {
		return this.#_native_self.flip(this.#_native_self,dim);
	}

	cumsum(axis) {
		return this.#_native_self.cumsum(this.#_native_self,axis);
	}

	norm(axes, p, keepDims) {
		return this.#_native_self.norm(this.#_native_self,axes, p, keepDims);
	}

	tile(shape) {
		return this.#_native_self.tile(this.#_native_self,shape);
	}

	where(x, y) {
		return this.#_native_self.where(this.#_native_self,x, y);
	}

	sum(axes, keepDims) {
		return this.#_native_self.sum(this.#_native_self,axes, keepDims);
	}

	tril() {
		return this.#_native_self.tril(this.#_native_self,);
	}

	mean(axes, keepDims) {
		return this.#_native_self.mean(this.#_native_self,axes, keepDims);
	}

	any(axes, keepDims) {
		return this.#_native_self.any(this.#_native_self,axes, keepDims);
	}

	all(axes, keepDims) {
		return this.#_native_self.all(this.#_native_self,axes, keepDims);
	}

	amax(axes, keepDims) {
		return this.#_native_self.amax(this.#_native_self,axes, keepDims);
	}

	log() {
		return this.#_native_self.log(this.#_native_self,);
	}

	ceil() {
		return this.#_native_self.ceil(this.#_native_self,);
	}

	erf() {
		return this.#_native_self.erf(this.#_native_self,);
	}

	sign() {
		return this.#_native_self.sign(this.#_native_self,);
	}

	power(rhs) {
		return this.#_native_self.power(this.#_native_self,rhs);
	}

	amin(axes, keepDims) {
		return this.#_native_self.amin(this.#_native_self,axes, keepDims);
	}

	std(axes, keepDims) {
		return this.#_native_self.std(this.#_native_self,axes, keepDims);
	}

	nonzero() {
		return this.#_native_self.nonzero(this.#_native_self,);
	}

	clip(low, high) {
		return this.#_native_self.clip(this.#_native_self,low, high);
	}

	roll(shift, axis) {
		return this.#_native_self.roll(this.#_native_self,shift, axis);
	}

	matmul(rhs, lhsProp, rhsProp) {
		return this.#_native_self.matmul(this.#_native_self,rhs, lhsProp, rhsProp);
	}

	sqrt() {
		return this.#_native_self.sqrt(this.#_native_self,);
	}

	sigmoid() {
		return this.#_native_self.sigmoid(this.#_native_self,);
	}

	var(axes, bias, keepDims) {
		return this.#_native_self.var(this.#_native_self,axes, bias, keepDims);
	}

	absolute() {
		return this.#_native_self.absolute(this.#_native_self,);
	}

	reshape(shape) {
		return this.#_native_self.reshape(this.#_native_self,shape);
	}

	transpose(axes) {
		return this.#_native_self.transpose(this.#_native_self,axes);
	}

	negative() {
		return this.#_native_self.negative(this.#_native_self,);
	}

	exp() {
		return this.#_native_self.exp(this.#_native_self,);
	}

	floor() {
		return this.#_native_self.floor(this.#_native_self,);
	}

	rint() {
		return this.#_native_self.rint(this.#_native_self,);
	}

	isnan() {
		return this.#_native_self.isnan(this.#_native_self,);
	}

	triu() {
		return this.#_native_self.triu(this.#_native_self,);
	}

	median(axes, keepDims) {
		return this.#_native_self.median(this.#_native_self,axes, keepDims);
	}

}

const isinf = (tensor) => {
	return _isinf(tensor);
}

const sort = (input, axis, sortMode) => {
	return _sort(input, axis, sortMode);
}

const maximum = (lhs, rhs) => {
	return _maximum(lhs, rhs);
}

const argmin = (input, axis, keepDims) => {
	return _argmin(input, axis, keepDims);
}

const countNonzero = (input, axes, keepDims) => {
	return _countNonzero(input, axes, keepDims);
}

const arange = (start, end, step, type) => {
	return _arange(start, end, step, type);
}

const concatenate = (tensors, axis) => {
	return _concatenate(tensors, axis);
}

const log1p = (tensor) => {
	return _log1p(tensor);
}

const tanh = (tensor) => {
	return _tanh(tensor);
}

const flip = (tensor, dim) => {
	return _flip(tensor, dim);
}

const cumsum = (input, axis) => {
	return _cumsum(input, axis);
}

const norm = (input, axes, p, keepDims) => {
	return _norm(input, axes, p, keepDims);
}

const logicalNot = (tensor) => {
	return _logicalNot(tensor);
}

const sin = (tensor) => {
	return _sin(tensor);
}

const cos = (tensor) => {
	return _cos(tensor);
}

const sum = (input, axes, keepDims) => {
	return _sum(input, axes, keepDims);
}

const full = (dims, val, type) => {
	return _full(dims, val, type);
}

const tile = (tensor, shape) => {
	return _tile(tensor, shape);
}

const where = (condition, x, y) => {
	return _where(condition, x, y);
}

const mean = (input, axes, keepDims) => {
	return _mean(input, axes, keepDims);
}

const any = (input, axes, keepDims) => {
	return _any(input, axes, keepDims);
}

const all = (input, axes, keepDims) => {
	return _all(input, axes, keepDims);
}

const tril = (tensor) => {
	return _tril(tensor);
}

const minimum = (lhs, rhs) => {
	return _minimum(lhs, rhs);
}

const argmax = (input, axis, keepDims) => {
	return _argmax(input, axis, keepDims);
}

const erf = (tensor) => {
	return _erf(tensor);
}

const sign = (tensor) => {
	return _sign(tensor);
}

const power = (lhs, rhs) => {
	return _power(lhs, rhs);
}

const amin = (input, axes, keepDims) => {
	return _amin(input, axes, keepDims);
}

const amax = (input, axes, keepDims) => {
	return _amax(input, axes, keepDims);
}

const iota = (dims, tileDims, type) => {
	return _iota(dims, tileDims, type);
}

const log = (tensor) => {
	return _log(tensor);
}

const ceil = (tensor) => {
	return _ceil(tensor);
}

const std = (input, axes, keepDims) => {
	return _std(input, axes, keepDims);
}

const matmul = (lhs, rhs, lhsProp, rhsProp) => {
	return _matmul(lhs, rhs, lhsProp, rhsProp);
}

const nonzero = (tensor) => {
	return _nonzero(tensor);
}

const clip = (tensor, low, high) => {
	return _clip(tensor, low, high);
}

const roll = (tensor, shift, axis) => {
	return _roll(tensor, shift, axis);
}

const sqrt = (tensor) => {
	return _sqrt(tensor);
}

const sigmoid = (tensor) => {
	return _sigmoid(tensor);
}

const var = (input, axes, bias, keepDims) => {
	return _var(input, axes, bias, keepDims);
}

const negative = (tensor) => {
	return _negative(tensor);
}

const exp = (tensor) => {
	return _exp(tensor);
}

const floor = (tensor) => {
	return _floor(tensor);
}

const rint = (tensor) => {
	return _rint(tensor);
}

const absolute = (tensor) => {
	return _absolute(tensor);
}

const identity = (dim, type) => {
	return _identity(dim, type);
}

const reshape = (tensor, shape) => {
	return _reshape(tensor, shape);
}

const transpose = (tensor, axes) => {
	return _transpose(tensor, axes);
}

const isnan = (tensor) => {
	return _isnan(tensor);
}

const triu = (tensor) => {
	return _triu(tensor);
}

const median = (input, axes, keepDims) => {
	return _median(input, axes, keepDims);
}

const eq = (lhs, rhs) => {
	return _eq(lhs, rhs);
}

const neq = (lhs, rhs) => {
	return _neq(lhs, rhs);
}

const add = (lhs, rhs) => {
	return _add(lhs, rhs);
}

const div = (lhs, rhs) => {
	return _div(lhs, rhs);
}

const rShift = (lhs, rhs) => {
	return _rShift(lhs, rhs);
}

const mul = (lhs, rhs) => {
	return _mul(lhs, rhs);
}

const lShift = (lhs, rhs) => {
	return _lShift(lhs, rhs);
}

const sub = (lhs, rhs) => {
	return _sub(lhs, rhs);
}

const logicalAnd = (lhs, rhs) => {
	return _logicalAnd(lhs, rhs);
}

const greaterThanEqual = (lhs, rhs) => {
	return _greaterThanEqual(lhs, rhs);
}

const lessThanEqual = (lhs, rhs) => {
	return _lessThanEqual(lhs, rhs);
}

const mod = (lhs, rhs) => {
	return _mod(lhs, rhs);
}

const logicalOr = (lhs, rhs) => {
	return _logicalOr(lhs, rhs);
}

const bitwiseAnd = (lhs, rhs) => {
	return _bitwiseAnd(lhs, rhs);
}

const bitwiseXor = (lhs, rhs) => {
	return _bitwiseXor(lhs, rhs);
}

const greaterThan = (lhs, rhs) => {
	return _greaterThan(lhs, rhs);
}

const lessThan = (lhs, rhs) => {
	return _lessThan(lhs, rhs);
}

const bitwiseOr = (lhs, rhs) => {
	return _bitwiseOr(lhs, rhs);
}

module.exports = {
	Tensor,
	isinf,
	sort,
	maximum,
	argmin,
	countNonzero,
	arange,
	concatenate,
	log1p,
	tanh,
	flip,
	cumsum,
	norm,
	logicalNot,
	sin,
	cos,
	sum,
	full,
	tile,
	where,
	mean,
	any,
	all,
	tril,
	minimum,
	argmax,
	erf,
	sign,
	power,
	amin,
	amax,
	iota,
	log,
	ceil,
	std,
	matmul,
	nonzero,
	clip,
	roll,
	sqrt,
	sigmoid,
	var,
	negative,
	exp,
	floor,
	rint,
	absolute,
	identity,
	reshape,
	transpose,
	isnan,
	triu,
	median,
	greaterThanEqual,
	lessThanEqual,
	mod,
	logicalOr,
	bitwiseAnd,
	bitwiseXor,
	greaterThan,
	lessThan,
	bitwiseOr,
	eq,
	neq,
	add,
	div,
	rShift,
	mul,
	lShift,
	sub,
	logicalAnd
}
