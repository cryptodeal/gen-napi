// Code generated by gen-napi. DO NOT EDIT.
const {
  _Tensor,
  _log1p,
  _cos,
  _tanh,
  _sign,
  _sort,
  _cumsum,
  _transpose,
  _log,
  _median,
  _any,
  _isnan,
  _sum,
  _all,
  _logicalNot,
  _rint,
  _amin,
  _norm,
  _concatenate,
  _isinf,
  _argmax,
  _argmin,
  _nonzero,
  _sqrt,
  _exp,
  _flip,
  _clip,
  _tril,
  _minimum,
  _maximum,
  _identity,
  _negative,
  _countNonzero,
  _matmul,
  _amax,
  _erf,
  _triu,
  _power,
  _mean,
  _full,
  _reshape,
  _ceil,
  _absolute,
  _sigmoid,
  _roll,
  _arange,
  _tile,
  _floor,
  _where,
  _var,
  _std,
  _iota,
  _sin,
  _lessThanEqual,
  _rShift,
  _lShift,
  _neq,
  _greaterThanEqual,
  _bitwiseAnd,
  _bitwiseOr,
  _lessThan,
  _eq,
  _add,
  _logicalOr,
  _div,
  _mul,
  _mod,
  _sub,
  _greaterThan,
  _logicalAnd,
  _bitwiseXor
} = require('../../build/Release/flashlight_napi_bindings.node')

class Tensor {
  #_native_self

  constructor(t) {
    this.#_native_self = new _Tensor(t)
  }

  isnan(...args) {
    return this.#_native_self.isnan(...args)
  }

  sum(...args) {
    return this.#_native_self.sum(...args)
  }

  all(...args) {
    return this.#_native_self.all(...args)
  }

  logicalNot(...args) {
    return this.#_native_self.logicalNot(...args)
  }

  rint(...args) {
    return this.#_native_self.rint(...args)
  }

  amin(...args) {
    return this.#_native_self.amin(...args)
  }

  norm(...args) {
    return this.#_native_self.norm(...args)
  }

  isinf(...args) {
    return this.#_native_self.isinf(...args)
  }

  argmin(...args) {
    return this.#_native_self.argmin(...args)
  }

  nonzero(...args) {
    return this.#_native_self.nonzero(...args)
  }

  sqrt(...args) {
    return this.#_native_self.sqrt(...args)
  }

  exp(...args) {
    return this.#_native_self.exp(...args)
  }

  flip(...args) {
    return this.#_native_self.flip(...args)
  }

  clip(...args) {
    return this.#_native_self.clip(...args)
  }

  tril(...args) {
    return this.#_native_self.tril(...args)
  }

  maximum(...args) {
    return this.#_native_self.maximum(...args)
  }

  negative(...args) {
    return this.#_native_self.negative(...args)
  }

  countNonzero(...args) {
    return this.#_native_self.countNonzero(...args)
  }

  matmul(...args) {
    return this.#_native_self.matmul(...args)
  }

  amax(...args) {
    return this.#_native_self.amax(...args)
  }

  erf(...args) {
    return this.#_native_self.erf(...args)
  }

  triu(...args) {
    return this.#_native_self.triu(...args)
  }

  power(...args) {
    return this.#_native_self.power(...args)
  }

  mean(...args) {
    return this.#_native_self.mean(...args)
  }

  reshape(...args) {
    return this.#_native_self.reshape(...args)
  }

  ceil(...args) {
    return this.#_native_self.ceil(...args)
  }

  absolute(...args) {
    return this.#_native_self.absolute(...args)
  }

  sigmoid(...args) {
    return this.#_native_self.sigmoid(...args)
  }

  roll(...args) {
    return this.#_native_self.roll(...args)
  }

  tile(...args) {
    return this.#_native_self.tile(...args)
  }

  floor(...args) {
    return this.#_native_self.floor(...args)
  }

  where(...args) {
    return this.#_native_self.where(...args)
  }

  var(...args) {
    return this.#_native_self.var(...args)
  }

  std(...args) {
    return this.#_native_self.std(...args)
  }

  sin(...args) {
    return this.#_native_self.sin(...args)
  }

  log1p(...args) {
    return this.#_native_self.log1p(...args)
  }

  cos(...args) {
    return this.#_native_self.cos(...args)
  }

  tanh(...args) {
    return this.#_native_self.tanh(...args)
  }

  sign(...args) {
    return this.#_native_self.sign(...args)
  }

  sort(...args) {
    return this.#_native_self.sort(...args)
  }

  cumsum(...args) {
    return this.#_native_self.cumsum(...args)
  }

  transpose(...args) {
    return this.#_native_self.transpose(...args)
  }

  log(...args) {
    return this.#_native_self.log(...args)
  }

  median(...args) {
    return this.#_native_self.median(...args)
  }

  any(...args) {
    return this.#_native_self.any(...args)
  }
}
