package napi

import (
	"fmt"
	"path/filepath"
	"strings"
)

func (g *PackageGenerator) writeFileCodegenHeader(w *strings.Builder) {
	w.WriteString("// Code generated by gen-napi. DO NOT EDIT.\n")
}

func (g *PackageGenerator) writeHeaderFrontmatter(w *strings.Builder) {
	if g.conf.HeaderFrontmatter != "" {
		w.WriteString(g.conf.HeaderFrontmatter)
	}
}

func (g *PackageGenerator) writeBindingsFrontmatter(w *strings.Builder) {
	if g.conf.BindingsFrontmatter != "" {
		w.WriteString(g.conf.BindingsFrontmatter)
	}
}

func (g *PackageGenerator) writeGlobalVars(w *strings.Builder) {
	if g.conf.GlobalVars != "" {
		w.WriteString("// globally scoped variables\n")
		w.WriteString("static std::atomic<bool> g_row_major = true;\n")
		w.WriteString(g.conf.GlobalVars)
		w.WriteByte('\n')
	}
}

func (g *PackageGenerator) writeRequiredIncludes(sb *strings.Builder) {
	sb.WriteString("#include <napi.h>\n")
	sb.WriteString("#include <atomic>\n")
	sb.WriteString("#include <string>\n")
}

func (g *PackageGenerator) writeFileSourceHeader(w *strings.Builder, path string) {
	w.WriteString("\n//////////\n// source: ")
	w.WriteString(fmt.Sprintf("%s\n\n", filepath.Base(path)))
}
