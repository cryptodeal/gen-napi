packages:
  - path: demo2/BasicLogic.h
    bindings_out_path: demo2/out
    js_wrapper_opts:
      addon_path: ../../build/Release/test.node
      wrapper_out_path: demo2/ts/index.ts
  # - path: demo1/TensorBase.h
  - path: ../flashlight/flashlight/fl/tensor/TensorBase.h
    lib_root_dir: ../flashlight
    bindings_out_path: demo1/out
    indent: "\t"
    vector_opts:
      row_major_default: true
      dim_accessor: ndim()
    type_mappings:
      Shape:
        ts: number[]
      Dim:
        ts: number
      T:
        ts: number
        napi: Number
    js_wrapper_opts:
      front_matter: import { Tensor } from './tensor'
      addon_path: ../../build/Release/shumai_bindings.node
      wrapper_out_path: demo1/ts/index.ts
    # TODO: need to debug (should not be necessary??)
    ignored_methods:
      - scalar
      - device
      #- pad
      - host
      - fromScalar
      - releaseAdapter
      - tensorBackendTypeToString
      - releaseAdapterUnsafe
      - detail::releaseAdapter
      - detail::releaseAdapterUnsafe
      - topk
      - print
    path_to_forced_logic: demo1/ForcedLogic.cc
    global_type_out_transforms:
      Tensor: |
        auto _out_byte_count = /return/.bytes();
        g_bytes_used += _out_byte_count;
        Napi::MemoryManagement::AdjustExternalMemory(env, _out_byte_count);
    # simplifies cases where multiple methods require transforming the generated logic (starting from after function call; useful when need to transform value before returning to JS)
    grouped_method_transforms:
      - arg_transforms:
          axis: auto axis = /arg/.As<Napi::Number>().Uint32Value();
        applies_to:
          - sort
          - argsort
      - return_transforms: |
          auto axes_set = std::unordered_set<int>{static_cast<int>(/arg_1/)};
          auto base_shape = (/arg_0/).shape().get();
          std::vector<fl::Dim> new_shape;
          for (size_t idx = 0; idx < base_shape.size(); ++idx) {
            if (axes_set.count(idx) || (axes_set.size() == 0)) {
              if (/arg_2/) {
                new_shape.emplace_back(1);
              }
              continue;
            }
            new_shape.emplace_back(base_shape[idx]);
          }
          const auto& shape = fl::Shape(new_shape);
          /return/ = fl::reshape(/return/, shape);
        arg_transforms:
          axis: auto axis = axisArg(/arg/.As<Napi::Number>().Uint32Value(), g_row_major, /arg_0/->ndim());
        applies_to:
          - argmin
          - argmax
      - return_transforms: |
          auto axes_set = std::unordered_set<int>(/arg_1/.begin(), /arg_1/.end());
          auto base_shape = (/arg_0/).shape().get();
          std::vector<fl::Dim> new_shape;
          for (size_t idx = 0; idx < base_shape.size(); ++idx) {
            if (axes_set.count(idx) || (axes_set.size() == 0)) {
              if (/arg_2/) {
                new_shape.emplace_back(1);
              }
              continue;
            }
            new_shape.emplace_back(base_shape[idx]);
          }
          const auto& shape = fl::Shape(new_shape);
          /return/ = fl::reshape(/return/, shape);
        applies_to:
          - any
          - all
          - amin
          - amax
          - countNonzero
          - sum
          - mean
          - std
          - median
    method_transforms:
      arange:
        arg_count: 3
        arg_check_transforms: |
          if (!info[0].IsNumber()) {
             Napi::TypeError::New(env, "`arange` expects args[0] to be typeof `number`").ThrowAsJavaScriptException();
             return env.Null();
           }
           if (!info[1].IsNumber()) {
             Napi::TypeError::New(env, "`arange` expects args[1] to be typeof `number`").ThrowAsJavaScriptException();
             return env.Null();
           }
           if (!info[2].IsNumber()) {
             Napi::TypeError::New(env, "`arange` expects args[2] to be typeof `number`").ThrowAsJavaScriptException();
             return env.Null();
           }
        return_transforms: /return/ = fl::arange(/arg_0/, /arg_1/, /arg_2/);
        arg_transforms:
          start: float start = /arg/.As<Napi::Number>().FloatValue();
          end: float end = /arg/.As<Napi::Number>().FloatValue();
          step: float step = /arg/.As<Napi::Number>().FloatValue();
      var:
        return_transforms: |
          /return/ = fl::var(/arg_0/, /arg_1/, /arg_2/, /arg_3/);
          auto axes_set = std::unordered_set<int>(/arg_1/.begin(), /arg_1/.end());
          auto base_shape = (/arg_0/).shape().get();
          std::vector<fl::Dim> new_shape;
          for (size_t idx = 0; idx < base_shape.size(); ++idx) {
            if (axes_set.count(idx) || (axes_set.size() == 0)) {
              if (/arg_3/) {
                new_shape.emplace_back(1);
              }
              continue;
            }
            new_shape.emplace_back(base_shape[idx]);
          }
          const auto& shape = fl::Shape(new_shape);
          /return/ = fl::reshape(/return/, shape);
      norm:
        return_transforms: |
          /return/ = fl::norm(/arg_0/, /arg_1/, /arg_2/, /arg_3/);
          if (p == std::numeric_limits<double>::infinity()) {
            /return/ = fl::abs(/arg_0/);
            /return/ = fl::amax(/arg_0/, /arg_1/, /arg_3/);
          }
          auto axes_set = std::unordered_set<int>(/arg_1/.begin(), /arg_1/.end());
          auto base_shape = (/arg_0/).shape().get();
          std::vector<fl::Dim> new_shape;
          for (size_t idx = 0; idx < base_shape.size(); ++idx) {
            if (axes_set.count(idx) || (axes_set.size() == 0)) {
              if (/arg_3/) {
                new_shape.emplace_back(1);
              }
              continue;
            }
            new_shape.emplace_back(base_shape[idx]);
          }
          const auto& shape = fl::Shape(new_shape);
          /return/ = fl::reshape(/return/, shape);
      full:
        arg_count: 2
        return_transforms: /return/ = fl::full(fl::Shape(/arg_0/), /arg_1/);
        arg_transforms:
          dims: std::vector<long long> dims = jsArrayToVector<long long>(/arg/.As<Napi::Array>(), g_row_major, false);
          val: float val = /arg/.As<Napi::Number>().FloatValue();
      identity:
        arg_transforms:
          dim: int64_t dim = /arg/.As<Napi::Number>().Int64Value();
      iota:
        arg_transforms:
          dims: auto dims = jsArrayToVector<long long>(/arg/.As<Napi::Array>(), g_row_major, false);
          tileDims: auto tileDims = jsArrayToVector<long long>(/arg/.As<Napi::Array>(), g_row_major, false);
      concatenate:
        arg_transforms:
          axis: auto axis = axisArg(/arg/.As<Napi::Number>().Int32Value(), g_row_major, (&/arg_0/[0])->ndim());
          tensors: auto tensors = jsTensorArrayArg<fl::Tensor>(/arg/.As<Napi::Array>());
      tril:
        return_transforms: |
          if (g_row_major) {
            /return/ = fl::triu(/arg_0/);
          } else {
            /return/ = fl::tril(/arg_0/);
          }
      triu:
        return_transforms: |
          if (g_row_major) {
            /return/ = fl::tril(/arg_0/);
          } else {
            /return/ = fl::triu(/arg_0/);
          }
      matmul:
        return_transforms: |
          if (g_row_major) {
            /return/ = fl::matmul(/arg_1/, /arg_0/, /arg_3/, /arg_2/);
          } else {
            /return/ = fl::matmul(/arg_0/, /arg_1/, /arg_2/, /arg_3/);
          }
      tile:
        arg_transforms:
          shape: auto shape = jsArrayToVector<long long>(/arg/.As<Napi::Array>(), g_row_major, false);
      transpose:
        arg_transforms:
          axes: auto axes = jsArrayToVector<long long>(/arg/.As<Napi::Array>(), g_row_major, /arg_0/->ndim());
      reshape:
        arg_transforms:
          shape: auto shape = jsArrayToVector<long long>(/arg/.As<Napi::Array>(), g_row_major, false);
    type_handlers:
      dtype:
        out_type: Napi::Number
        out_var: _out
        handler: Napi::Number _out = Napi::Number::New(env, static_cast<double>(/val/));
      Shape:
        out_type: Napi::TypedArrayOf<int64_t>
        out_var: _out
        handler: |
          const size_t length = static_cast<const size_t>(UnExternalize<fl::Tensor>(info[0])->ndim());
          Napi::TypedArrayOf<int64_t> _out =
              Napi::TypedArrayOf<int64_t>::New(env, length, napi_bigint64_array);
          const int out_len = static_cast<int>(length);
          for (auto i = 0; i < out_len; ++i) {
            const auto idx = g_row_major ? out_len - i - 1 : i;
            _out[i] = static_cast<long long>(/val/[idx]);
          }
    class_opts:
      Tensor:
        ext_finalizer_transform: |
          if (/this/->hasAdapter()) {
            auto byte_count = static_cast<int64_t>(/this/->bytes());
            g_bytes_used -= byte_count;
            Napi::MemoryManagement::AdjustExternalMemory(env, -byte_count);
          }
